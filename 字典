字典、创建字典、编辑字典和使用字典
字典：多个"键：值"对组成的无序序列。类型可以不同。
创建元组：{...}和dict(…)、d = {k1 : v1, k2 : v2, … , kn : vn }
添加键值：s['name']='郭靖'、
索引分片：
修改元素：s['name']='杨康'、d.update(t)
删除元素：d.pop('name')，d.clear()，del d['sex']，del d
访问元组：v=d[k]、d.get(k[,v])、d.keys()、d.values()、d.items()、for y in d.values():print(y)
使用元组：len(s)，sum(s)，max(s)，min(s)、比较、sorted()

字典是Python支持的无序可变经据结构。
字典：由多个"键：值"对组成的无序序列。
字典的每个键值对的类型可以不同。
内容包括：创建字典、编辑字典和使用字典等。

元组可以用作字典的键，列表不能用作字典的键。
不变集合可以用作字典的键，可变集合不能用作字典的键。即：键是只读的。

创建字典

字典的每个键值(key：value)对用冒号(:)分隔，每个对之间用逗号(,)分隔，并使用大括号({})定界。

d = {k1 : v1, k2 : v2, … , kn : vn }
注意：键必须唯一，值则不必。值可以取任何数据类型，但键不可变（如：字符串，整数、实数、或元组）。
不难看出，字典不但可变，而且支持任意数据类型，任意层次的嵌套。
字典可以使用{...}和dict(…)创建。如果字典中不含任何元素，则可以创建空字典。
例如：x={}，x=dict()，x={'u':1, 'v':2, 'w':3})。

>>> print({},dict(),type({}),type(dict()))
{} {} <class 'dict'> <class 'dict'>
>>> print({'sno':'180101','sname':'黄蓉','ssex':'女','sage':19})
{'sno': '180101', 'sname': '黄蓉', 'ssex': '女', 'sage': 19}
>>> print({'a':1,'b':2,'c':3})
{'a': 1, 'b': 2, 'c': 3}
>>> print({1:'a',2:'b',3:'c'})
{1: 'a', 2: 'b', 3: 'c'}

>>> d={'姓名':'郭靖',\
         '生日':{'年':12018,'月':2,'日':6,'时间':{'时':6,'分':6,'秒':6}},\
         '年龄':19}
>>> print(d)
{'姓名': '郭靖', '生日': {'年': 12018, '月': 2, '日': 6, '时间': {'时': 6, '分': 6, '秒': 6}}, '年龄': 19}
>>> print(type(d))
<class 'dict'>

使用setdefault(k[,v])设置k的默认值v（默认：None）。如果键不存在，则会添加新键值对。如果键已存在，则保持原值，并返回原值。

>>> s={'name':"黄蓉",'sex':'女'}
>>> s.setdefault('sex','男')
'女'
>>> print(s)
{'name': '黄蓉', 'sex': '女'}
>>> s.setdefault('birth','1990-1-1')
'1990-1-1'
>>> print(s)
{'name': '黄蓉', 'sex': '女', 'birth': '1990-1-1'}
>>> s.setdefault('grade')
>>> print(s)
{'name': '黄蓉', 'sex': '女', 'birth': '1990-1-1', 'grade': None}

利用dict()可以把列表或元组转换为字典。也可以利用值给键赋值的方式创建字典。

>>> print(dict([['a',1],['b',2],['c',3]]))
{'a': 1, 'b': 2, 'c': 3}
>>> print(dict([('a',1),('b',2),('c',3)]))
{'a': 1, 'b': 2, 'c': 3}
>>> print(dict((['a',1],['b',2],['c',3])))
{'a': 1, 'b': 2, 'c': 3}
>>> print(dict((('a',1),('b',2),('c',3))))
{'a': 1, 'b': 2, 'c': 3}
>>> print(dict(sno='180101',sname='黄蓉',ssex='女',sage=19))

{'sno': '180101', 'sname': '黄蓉', 'ssex': '女', 'sage': 19}

使用d.fromkeys(k[,v])创建字典；省略值，则默认None(空值)。

>>> d={}.fromkeys(['a','b'],2)
>>> print(d)
{'a': 2, 'b': 2}
>>> d={}.fromkeys(('a','b'))
>>> print(d)
{'a': None, 'b': None}
>>> d={'x':1,'y':2}

>>> d=d.fromkeys(('a','b'),2)
>>> print(d)
{'a': 2, 'b': 2}
>>> d={'x':1,'y':2}
>>> t=d.fromkeys(('a','b'),2)
>>> print(d,t)
{'x': 1, 'y': 2} {'a': 2, 'b': 2}

不难看出，字典中可以任意嵌套任何数据。

编辑字典

添加键值：使用键，利用赋值语句直接添加键值对，如果键已经存在，则会使用新值修改旧值。显然该方法具有添加和修改的双重功能。

>>> s={'name':"黄蓉",'sex':'女'}
>>> s['name']='郭靖'
>>> s['birth']='1996-10-1'
>>> s['grade']=(99,98,96,92)
>>> print(s)
{'name': '郭靖', 'sex': '女', 'birth': '1996-10-1', 'grade': (99, 98, 96, 92)}

修改键值：利用赋值语句直接修改指定键的值。方法同上。

注意：只能修改键的值，不能修改键！如果必须修改，则可以先删除该键值对，再添加一个新的键值对。
>>> s={'name': '郭靖', 'sex': '女', 'birth': '1996-10-1', 'grade': (99, 98, 96, 92)}
>>> s['name']='杨康';s['sex']='男'
>>> s['birth']='1995-1-1'
>>> s['grade']=(90,96,95)
>>> print(s)
{'name': '杨康', 'sex': '男', 'birth': '1995-1-1', 'grade': (90, 96, 95)}

删除字典及其键值：使用pop()，popitem()，clear()和del删除元素。

pop[k[,v]]：删除指定的键值对。若键不存在，则返回v。
popitem()：随机删除一个键值对。
Clear()：清除字典的所有对象。
Del d[k]：删除指定的字典，或者指定的键。
例如：d.pop('name')，d.clear()，del d['sex']，del d。
>>> d={'a':1,'b':2,'c':3,'x':6,'y':7,'z':8}
>>> d.pop('z')
8
>>> print(d)
{'a': 1, 'b': 2, 'c': 3, 'x': 6, 'y': 7}
>>> d.pop('u',9)
9
>>> d.popitem()
('y', 7)
>>> print(d)
{'a': 1, 'b': 2, 'c': 3, 'x': 6}
>>> del d['b']
>>> print(d)
{'a': 1, 'c': 3, 'x': 6}
>>> d.clear()
>>> print(d)
{}
>>> del d
访问字典：使用键获取相应的值（即：v=d[k]；注意：如果键不存在，则会出错）。使用d.get(k[,v])、d.keys()、d.values()、d.items()和for访问字典的键和值。
d.get(k[,v])：返回键的值。若键不存在，则返回v(默认：None)。
d.keys()：返回字典的键。
d.values()：返回字典的值。
d.items()：返回字典的键值对。
>>> d={'sno':'180101','sname':'黄蓉','ssex':'女','sage':19}
>>> print(d['sno'],d['sname'],d['ssex'],d['sage'])
180101 黄蓉 女 19
>>> print(d.get('sname'),d.get('ssex','男'),d.get('age'),d.get('age',16))
黄蓉 女 None 16
>>> print(d.keys())
dict_keys(['sno', 'sname', 'ssex', 'sage'])
>>> print(d.values())

dict_values(['180101', '黄蓉', '女', 19])
>>> print(d.items())
dict_items([('sno', '180101'), ('sname', '黄蓉'), ('ssex', '女'), ('sage', 19)])
>>> for x in d.keys():print(x)
sno
sname
ssex
sage
>>> for y in d.values():print(y)
180101
黄蓉
女
19
>>> for x in d.keys():print(x,d[x])
sno 180101
sname 黄蓉
ssex 女

sage 19
>>> for x in d.items():print(x)
('sno', '180101')
('sname', '黄蓉')
('ssex', '女')
('sage', 19)
连接字典：利用d.update(t)，可以把t添加到d。
>>> d={'x':1,'y':2,'z':3};t={'a':5,'b':6,'c':7}
>>> d.update(t)
>>> print(d,t)
{'x': 1, 'y': 2, 'z': 3, 'a': 5, 'b': 6, 'c': 7} {'a': 5, 'b': 6, 'c': 7}
长度、求和、最小和最大：利用len()、sum()、max()和min()实现。
例如：len(d)，sum(d)，max(d)，min(d)。
>>> d={'x': 1, 'y': 2, 'z': 3, 'a': 5, 'b': 6, 'c': 7}
>>> print(len(d),sum(d.values()),max(d),min(d))
6 24 z a
关系：关系运算符（<=，<，>，>=，==，!=，is，is not，in，not in）适用于字典。
注意：需要指明是键、值，还是键值对之间的关系。
>>> d={'x':1,'y':2,'z':3};t={'a':5,'b':6,'c':7}
>>> print(d['x']<=t['a'],d is t,d!=t)
True False True
>>> print('y' in d, 'y' not in t)
True True
排序：可以使用sorted()实现排序。
注意：排序结果是字典的键组成的列表。
sorted(s,reverse=True|False)：True降序，False升序（默认）。
>>> d={'x': 1, 'y': 2, 'z': 3, 'a': 5, 'b': 6, 'c': 7}
>>> t=sorted(d,reverse=True)
>>> print(d,t,type(t))
{'x': 1, 'y': 2, 'z': 3, 'a': 5, 'b': 6, 'c': 7} ['z', 'y', 'x', 'c', 'b', 'a'] <class 'list'>
利用list()、tuple()和set()，把字典的键（值）转为列表、元组和集合
>>> d={'x':1,'y':2,'z':3}
>>> x=list(d)
>>> y=tuple(d)
>>> z=set(d)
>>> print(d,x,y,z)
{'x': 1, 'y': 2, 'z': 3} ['x', 'y', 'z'] ('x', 'y', 'z') {'z', 'x', 'y'}
>>> u=list(d.values())
>>> v=tuple(d.values())
>>> w=set(d.values())
>>> print(d,u,v,w)
{'x': 1, 'y': 2, 'z': 3} [1, 2, 3] (1, 2, 3) {1, 2, 3}
复制字典：可以使用赋值、s.copy()和copy.copy()实现。
例如：t=s，t=s.copy，t=copy.copy(s)。
>>> a={'x': 1, 'y': 2, 'z': 3}
>>> b=a
>>> c=a.copy()
>>> import copy
>>> d=copy.copy(a)
>>> print(a,b,c,d)
{'x': 1, 'y': 2, 'z': 3} {'x': 1, 'y': 2, 'z': 3} {'x': 1, 'y': 2, 'z': 3} {'x': 1, 'y': 2, 'z': 3}
>>> print(id(a),id(b),id(c),id(d))
2665226844200 2665226844200 2665226843624 2665226843480
>>> a['x']=6
>>> print(a,b,c,d)
{'x': 6, 'y': 2, 'z': 3} {'x': 6, 'y': 2, 'z': 3} {'x': 1, 'y': 2, 'z': 3} {'x': 1, 'y': 2, 'z': 3}
>>> print(id(a),id(b),id(c),id(d))
2665226844200 2665226844200 2665226843624 2665226843480
>>> b['y']=7
>>> print(a,b,c,d)
{'x': 6, 'y': 7, 'z': 3} {'x': 6, 'y': 7, 'z': 3} {'x': 1, 'y': 2, 'z': 3} {'x': 1, 'y': 2, 'z': 3}
>>> print(id(a),id(b),id(c),id(d))
2665226844200 2665226844200 2665226843624 2665226843480
>>> c['z']=8
>>> print(a,b,c,d)
{'x': 6, 'y': 7, 'z': 3} {'x': 6, 'y': 7, 'z': 3} {'x': 1, 'y': 2, 'z': 8} {'x': 1, 'y': 2, 'z': 3}
>>> print(id(a),id(b),id(c),id(d))
2665226844200 2665226844200 2665226843624 2665226843480
>>> d.update({'u':9})
>>> print(a,b,c,d)
{'x': 6, 'y': 7, 'z': 3} {'x': 6, 'y': 7, 'z': 3} {'x': 1, 'y': 2, 'z': 8} {'x': 1, 'y': 2, 'z': 3, 'u': 9}
>>> print(id(a),id(b),id(c),id(d))
2665226844200 2665226844200 2665226843624 2665226843480
