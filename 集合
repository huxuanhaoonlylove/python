集合、创建集合、编辑集合和使用集合

集合：多个数据元素组成的无序序列。类型可以不同。

创建元组：{...}、range(n)和set(…)、x={frozenset{1,2,3},frozenset({7,8,9})}
添加元素：s.add(6)
索引分片：
修改元素：集合可以改变，元素值不能修改。s.update、s|t，s&t，s-t，s^t
删除元素：s.remove(6)，s.discard(9)，s.pop()，s.clear()，del s
访问元组：for x in {1,2,3,4,5,6}:print(x)
使用元组：len(s)，sum(s)，max(s)，min(s)、比较

集合是Python支持的无序数据结构。
集合：由多个数据元素组成的无序序列。
元组的每个元素的类型可以不同。
内容包括：创建集合、编辑集合和使用集合等。
集合分为可变集合和不变集合（冻结集合，只读集合）。不变集合需要使用frozenset()定义。

创建集合

可以使用{...}、range(n)和set(…)创建。如果集合中不含任何元素，则可以创建空集合。集合中不能包含相同的元素（即：相同元素仅保留一个）。
集合的元素的值不能修改，所以集合的元素只能是整数、实数、字符串、元组和冻结集合，不能使可变的列表、可变集合和字典。
注意：{}创建的是空字典，而非空集合。

例如：x={}，x=set()，x={u,v,w}，x=set(range(9))。
>>> print({},set(),type({}),type(set()))
{} set() <class 'dict'> <class 'set'>
>>> print({'a','b','c','d'},set(range(9)),type(set(range(9))))
{'c', 'd', 'a', 'b'} {0, 1, 2, 3, 4, 5, 6, 7, 8} <class 'set'>
>>> print(set(range(1,60,5)))
{1, 36, 6, 41, 11, 46, 16, 51, 21, 56, 26, 31}
>>> print({1,2,3,4,5,6,'a','b','b',10.36})

{1, 2, 3, 4, 5, 6, 'b', 10.36, 'a'}

利用set()可以把字符串、列表或元组转换为集合。

>>> print(set('abcdef123456'))
{'1', 'd', 'b', '5', '6', '3', '2', '4', 'f', 'e', 'a', 'c'}
>>> print(set([1,2,3,3,5,6,'a','b','c','c','e','f']))
{1, 2, 3, 5, 6, 'b', 'f', 'e', 'a', 'c'}
>>> print(set((1,2,3,3,5,6,'a','b','c','c','e','f')))
{1, 2, 3, 5, 6, 'b', 'f', 'e', 'a', 'c'}

利用集合的嵌套可以创建伪二维集合。注意：只有冻结集合，才可以作为集合的元素。

例如：x={frozenset{1,2,3,4,5},frozenset({5,6,7,8,9})}。
>>> print({frozenset({1,2,3,4,5}),frozenset({2,3,4,5,6})})
{frozenset({2, 3, 4, 5, 6}), frozenset({1, 2, 3, 4, 5})}
>>> print({(1,2,3,4,5),(2,3,4,5,6)})
{(1, 2, 3, 4, 5), (2, 3, 4, 5, 6)}

不难看出，集合中可以嵌套冻结集合和元组等只读数据。

编辑集合

集合可以改变，但其元素的值不能修改

添加元素：可以使用s.add(x)方法为集合添加新元素。
例如：s.add(6)。
>>> s={1,2,3}
>>> s.add('a')
>>> print(s)
{1, 2, 3, 'a'}

修改集合：
可以利用s.update(t1,t2,…,tn)更新s。即：利用s、t1、t2、…、tn的并集更新s。
可以利用s.intersection_update(t1,t2,…,tn)更新s。即：利用s、t1、t2、…、tn的交集更新s。
可以利用s.difference_update(t1,t2,…,tn)更新s。即：利用s-t1-t2-…-tn的更新s。
可以利用s.symmetric_ difference_update(t)更新s。即：利用s和t中，但非s和t共有的元素更新s（s=s^t）。

>>> s={1,2,3}
>>> s.update({3,6,9},{'a','b'},{True,False})
>>> print(s)
{False, 1, 2, 3, 'b', 6, 9, 'a'}
>>> s.intersection_update({1,3,6,9},{1,'a',3,'b'},{True,False,3})
>>> print(s)
{1, 3}

>>> s.difference_update({3,6,9},{'a','b'},{False,3})
>>> print(s)
{1}
>>> s={1,2,3,4,5,6};t={4,5,6,'a','b','c'}
>>> s.symmetric_difference_update(t)
>>> print(s)
{1, 2, 3, 'c', 'a', 'b'}。

删除元素：使用remove(e)，discard()，pop()，clear()和del删除元素。

remove和discard的规则：删除列表中指定的值。
pop的规则：删除任意一个元素。
clear的规则：清除集合的所有元素。
del的规则：删除整个集合。
例如：s.remove(6)，s.discard(9)，s.pop()，s.clear()，del s。

>>> s=set(range(10))
>>> print(s)
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
>>> s.remove(4)
>>> print(s)
{0, 1, 2, 3, 5, 6, 7, 8, 9}
>>> s.discard(3)
>>> print(s)
{0, 1, 2, 5, 6, 7, 8, 9}

>>> s.pop()
0
>>> print(s)
{1, 2, 5, 6, 7, 8, 9}
>>> s.clear()
>>> print(s)
set()
>>> del s

使用集合

尽管不能修改集合的元素的值；却可以访问集合，计算并集、交集、差集、复制和判断关系等。
访问集合：可以使用for实现。
>>> for x in {1,2,3,4,5,6}:print(x)
集合并集、交集、差集和对称差集：使用|、&、-和^实现。也可以使用union()、intersection()、difference()和symmetric_ difference()实现。
例如：s|t，s&t，s-t，s^t。
>>> s={1,2,3,'a','b'};t={3,'a','b','c'}
>>> print(s|t,s&t,s-t,s^t)
{1, 2, 3, 'a', 'b', 'c'} {3, 'a', 'b'} {1, 2} {1, 2, 'c'}
可以使用|，把t并入s。即：s|=t。
>>> s|=t
>>> print(s,t)
{1, 2, 3, 'c', 'a', 'b'} {'c', 3, 'a', 'b'}
>>> print({1,2,3,'a','b'}.union({3,'a','b','c'},{66}))
{1, 2, 3, 66, 'a', 'b', 'c'}

>>> print({1,2,3,'a','b'}.intersection({3,'a','b','c'},{3,'a'}))
{3, 'a'}
>>> print({1,2,3,'a','b'}.difference({3,'a','b','c'},{2,3,'a'}))
{1}
>>> print({1,2,3,'a','b'}.symmetric_difference({3,'a','b','c'}))
{1, 2, 'c'}

长度、求和、最小和最大：利用len()、sum()、max()和min()实现。

例如：len(s)，sum(s)，max(s)，min(s)。
>>> s=set(range(10))
>>> print(s)
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
>>> print(len(s),sum(s),max(s),min(s))
10 45 9 0

关系：关系运算符（<=，<，>，>=，==，!=，is，is not，in，not in）适用于集合。集合之间的关系，按照集合的包含关系进行比较（即：子集与超集）。

可以使用issubset()、issuperset()实现子集和超集。
可以使用isdisjoint()判断集合的交集是否为空集，若空返回True，否则返回False。
例如：{1,2,3)>('a', 'b', 'c')，('a', 'b', 'c', '2')>=('a', 'c')。
>>> x={1,2,3};y={'a','b','c'};z={1,2};w={'a','b'}
>>> print(x>y,x<=y,z<x,y>=w)
False False True True
>>> print(z.issubset(x),y.issuperset(w))
True True
>>> print(x.isdisjoint(y),x.isdisjoint(z))
True False
>>> print(z in x, 2 in x, w not in y ,'a' not in y)

False True True False

复制集合：可以使用s.cop()和copy.copy()实现。

例如：t=s，t=s.copy()，t=copy.copy(s)。
>>> a={1,2,3}
>>> b=a
>>> c=a.copy()
>>> import copy
>>> d=copy.copy(a)
>>> print(a,b,c,d)
{1, 2, 3} {1, 2, 3} {1, 2, 3} {1, 2, 3}

>>> print(id(a),id(b),id(c),id(d))
2246254896744 2246254896744 2246251637896 2246251637448
>>> a.union({'a'})
{1, 2, 3, 'a'}
>>> print(a,b,c,d)
{1, 2, 3} {1, 2, 3} {1, 2, 3} {1, 2, 3}
>>> print(id(a),id(b),id(c),id(d))
2246254896744 2246254896744 2246251637896 2246251637448
>>> a.add('a')
>>> print(a,b,c,d)
{1, 2, 3, 'a'} {1, 2, 3, 'a'} {1, 2, 3} {1, 2, 3}

>>> print(id(a),id(b),id(c),id(d))
2246254896744 2246254896744 2246251637896 2246251637448
>>> b.add('b')
>>> print(a,b,c,d)
{1, 2, 3, 'a', 'b'} {1, 2, 3, 'a', 'b'} {1, 2, 3} {1, 2, 3}
>>> print(id(a),id(b),id(c),id(d))
2246254896744 2246254896744 2246251637896 2246251637448
>>> c.add('c')

>>> print(a,b,c,d)
{1, 2, 3, 'a', 'b'} {1, 2, 3, 'a', 'b'} {1, 2, 3, 'c'} {1, 2, 3}
>>> print(id(a),id(b),id(c),id(d))
2246254896744 2246254896744 2246251637896 2246251637448
>>> d.add('d')
>>> print(a,b,c,d)
{1, 2, 3, 'a', 'b'} {1, 2, 3, 'a', 'b'} {1, 2, 3, 'c'} {1, 2, 3, 'd'}
>>> print(id(a),id(b),id(c),id(d))
2246254896744 2246254896744 2246251637896 2246251637448
思考：集合、元组和元组的异同点。


