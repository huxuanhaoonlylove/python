元组、创建元组、编辑元组和使用元组

创建元组：(...)、range(n)和tuple(…)、x*n，n*x、x=((1,2,3),(4,5,6))
添加元素：
索引分片：x(i[:j[:k]] )，index(x[,m[,n]])
修改元素：
删除元素：del s
访问元组：for x in [1,2,3,4,5,6]:print(x)、y= x[i:j:k]
使用元组：s+t、len(s)，sum(s)，max(s)，min(s)、比较、s.count(x)


元组是Python中的基本数据结构。
元组：由多个数据元素组成的不可改变的有序序列。
元组的每个元素的类型可以不同。
内容包括：创建元组、编辑元组和使用元组等。

元组可以看作是只读的列表。

创建元组

元组：多个数据元素组成的不可改变的有序序列。类型不同。只读

使用(...)、range(n)和tuple(…)创建。如果元组中不含任何元素，则可以创建空元组。
例如：x=()，x=tuple()，x=(u,v,w)，x= tuple (range(9))。
>>> print((),tuple(),type(()),type(tuple()))
() () <class 'tuple'> <class 'tuple'>
>>> print(('a','b','c','d'),tuple(range(9)),type(tuple(range(9))))
('a', 'b', 'c', 'd') (0, 1, 2, 3, 4, 5, 6, 7, 8) <class 'tuple'>
>>> print(tuple(range(1,60,5)))
(1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56)
>>> print((1,2,3,4,5,6,'a','b','b',10.36))
(1, 2, 3, 4, 5, 6, 'a', 'b', 'b', 10.36)

利用乘法*创建元组。对于单元素元组，元素后面必须为英文逗号“，”。

例如：x*n，n*x。
>>> print((1,2)*6,9*(5,))
(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2) (5, 5, 5, 5, 5, 5, 5, 5, 5)
思考：print((3)*6,9*(5))的结果如何？

利用tuple()可以把字符串或列表转换为元组。

>>> print(tuple('abcdef123456'))
('a', 'b', 'c', 'd', 'e', 'f', '1', '2', '3', '4', '5', '6')
>>> print(tuple([1,2,3,4,5,6,'a','b','c','d','e','f']))
(1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e', 'f')

利用元组的嵌套可以创建二维元组；也可以使用循环语句创建。

例如：x=((1,2,3,4,5),(5,6,7,8,9))。
再如：x=tuple([tuple([1 for x in range(n)]) for y in range(m)])。
>>> print(((1,2,3,4,5,6),(6,5,4,3,2,1)))
((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1))
>>> print(tuple([tuple([2 for x in range(6)]) for y in range(3)]))
((2, 2, 2, 2, 2, 2), (2, 2, 2, 2, 2, 2), (2, 2, 2, 2, 2, 2))
不难看出，元组中可以嵌套元组。


编辑元组


元组及其元素的值不能修改，但可以使用del删除整个元组，可以使用索引与分片（x([i[:j[:k]] ) ，index(x)访问元组。

索引与分片：元组中元素的位置（x(i[:j[:k]] )，index(x[,m[,n]])），用法与列表和字符串雷同。
例如：s(:)，s(2:]，s(:6 ) ，s(2:9 ) ，s( 2:9:2 )，s.index(x)。
>>> x=(1,2,3,4,5,6)
>>> y=('a','b','c','d')
>>> print(x[:],x[1],x[2:],x[:3],x[1:3],x[1:5:2],y.index('b'))
(1, 2, 3, 4, 5, 6) 2 (3, 4, 5, 6) (1, 2, 3) (2, 3) (2, 4) 1

元组及其元素的值不能修改，但可以使用del删除整个元组，可以使用索引与分片（x[i[:j[:k]]]，index(x)）访问元组。

不能使用insert(i,e)、append(y)和extend(z)方法等添加元素。
不能修改元素。
不能使用remove(e)，pop()和clear()删除元素。
删除元组：使用del删除整个元组。
例如：del x。
>>> x=(1,2,3,4,5,6)
>>> del x


使用元组

不能修改元组及其元素的值；可以使用索引和分片进行连接，取子元组，计算长度、求和、计数、查找最小和最大值和判断关系等；但是不能排序。

取子元组：可以使用元素的位置（x(i[:j[:k]])）实现（即：利用分片）。
例如：y= x(i:j:k)，。
>>> s=tuple(range(10))
>>> print(s[2],s[3:6],s[2:9:3])
2 (3, 4, 5) (2, 5, 8)

连接元组：利用+把两个元组连接成一个新元组，从而可以实现向元组中添加元素的功能。即：循环使用单元素元组与原元组连接。

例如：s+t。
>>> s=tuple(range(10));t=('a','b','c')
>>> x=s+t
>>> print(x)
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c')
>>> y=x+(True,)
>>> print(y)
(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', True)

长度、求和、最小和最大：利用len()、sum()、max()和min()实现。

例如：len(s)，sum(s)，max(s)，min(s)。
>>> s=tuple(range(10))
>>> print(len(s),sum(s),max(s),min(s))
10 45 9 0

关系：关系运算符（<=，<，>，>=，==，!=，is，is not，in，not in）适用于元组。元组间的关系，按元组第一个不同元素的大小进行比较。

例如：('1', '2', '3')>('a', 'b', 'c')，('a', 'b', 'c', '2')>=('a', 'c', 'c', 'D', '1')。
>>> x=('1','2','3');y=('a','b','c')
>>> print(x>y,y+('2',)>=('a','c','c','D','1'))
False False
>>> print(x is y, x != y, '2' in x, 'c' not in ('a','c','c','D','1'))
False True True False
>>> print(x is y, x != y, ('2',) in x, ('c',) not in ('a','c','c','D','1'))
False True False True

计数：可以使用s.count(x)实现，计算x在s中的次数。

例如：s.count(6)。
>>> s=(1,2,3,2,3,5,6,5,6,8,9,8,8,6,5)
>>> n=s.count(8)
>>> print(n,s)
3 (1, 2, 3, 2, 3, 5, 6, 5, 6, 8, 9, 8, 8, 6, 5)

复制元组：可以使用[:]和copy.copy()实现。可以使用s.copy()吗？

例如：t=s，t=s[:]，t=copy.copy(s)。
>>> a=('a','b','c')
>>> b=a
>>> c=a[:]
>>> import copy
>>> d=copy.copy(a)
>>> print(a,b,c,d)
('a', 'b', 'c') ('a', 'b', 'c') ('a', 'b', 'c') ('a', 'b', 'c')

>>> print(id(a),id(b),id(c),id(d))
1755261605352 1755261605352 1755261605352 1755261605352
>>> a=a+(1,)
>>> print(a,b,c,d)
('a', 'b', 'c', 1) ('a', 'b', 'c') ('a', 'b', 'c') ('a', 'b', 'c')
>>> print(id(a),id(b),id(c),id(d))
1755261613944 1755261605352 1755261605352 1755261605352

>>> b=b+(2,)
>>> print(a,b,c,d)
('a', 'b', 'c', 1) ('a', 'b', 'c', 2) ('a', 'b', 'c') ('a', 'b', 'c')
>>> print(id(a),id(b),id(c),id(d))
1755261613944 1755261613784 1755261605352 1755261605352
>>> c=c+(3,)
>>> print(a,b,c,d)
('a', 'b', 'c', 1) ('a', 'b', 'c', 2) ('a', 'b', 'c', 3) ('a', 'b', 'c')

>>> print(id(a),id(b),id(c),id(d))
1755261613944 1755261613784 1755261613544 1755261605352
>>> d=d+(4,)
>>> print(a,b,c,d)
('a', 'b', 'c', 1) ('a', 'b', 'c', 2) ('a', 'b', 'c', 3) ('a', 'b', 'c', 4)
>>> print(id(a),id(b),id(c),id(d))
1755261613944 1755261613784 1755261613544 1755261613464
思考1：是否可以使用s.copy()方法，实现元组的复制？
思考2：列表与元组的异同点。

